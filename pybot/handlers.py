from aiogram import Router, F
from aiogram import types
from aiogram.filters.command import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import Bot
from pybot.keyboards import get_main_keyboard, subscription_keyboard, payment_keyboard, get_dialog_keyboard, cancel_auto_payments
from openai import AsyncOpenAI
import database
from pybot.utils import (process_dialog, get_subscription_payment,
                         get_subscription_price_by_days, check_subscription,)

router = Router()


@router.message(CommandStart())
@router.message(F.text == "üí¨ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
async def cmd_start(message: types.Message):
    await database.create_user(
        message.chat.id,
        message.chat.username
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –°–∞—à–∞, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –¥—Ä—É–≥!\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
                         reply_markup=await get_main_keyboard())


@router.callback_query(F.data.startswith("prompt_"))
async def start_dialog(call: types.CallbackQuery, state: FSMContext):
    prompt_id = int(call.data.replace("prompt_", ""))
    prompt = await database.get_start_prompt_by_id(prompt_id)
    await database.clear_prompt_history(call.message.chat.id)
    await call.answer()
    await call.message.answer(prompt.bot_answer, reply_markup=await get_dialog_keyboard())
    await state.set_data({
        "prompt_id": prompt_id
    })


@router.message(Command("subscribe"))
@router.message(F.text == "üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞")
async def subscription_handler(message: Message):
    await message.answer("""
–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ üíé Premium –ø–æ–¥–ø–∏—Å–∫–∏:\nüöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø\nüßò –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–µ–∞–Ω—Å–æ–≤\nüì± –û–Ω–ª–∞–π–Ω 24/7
""", reply_markup=await subscription_keyboard())


@router.callback_query(F.data.startswith("subscription/"))
async def subscription_payment_details(call: CallbackQuery):
    days = int(call.data.replace("subscription/", ""))
    payment = await get_subscription_payment(days)
    await call.message.delete()
    await call.message.answer(
        f"""–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –¥–Ω–µ–π
–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {await get_subscription_price_by_days(days)}‚ÇΩ""",
        reply_markup=await payment_keyboard(payment.id, payment.confirmation.confirmation_url))


@router.callback_query(F.data == "back_to_subscriptions")
async def back_to_subscriptions(call: CallbackQuery):
    await call.message.delete()
    await subscription_handler(call.message)


@router.callback_query(F.data.startswith("paid/"))
async def check_is_paid(call: CallbackQuery):
    payment_id = call.data.replace("paid/", "")
    if await check_subscription(telegram_id=call.message.chat.id, payment_id=payment_id):
        await call.message.delete()
        await call.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞")
    else:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")


@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def dashboard(message: Message):
    user = await database.get_user_by_telegram_id(message.chat.id)
    subscription = await database.get_user_subscription(message.chat.id)
    kb = None
    if subscription and user.payment_method_id:
        kb = cancel_auto_payments()
    return await message.answer(f"""
üßëüèª‚Äçüíª –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üÜî –í–∞—à ID: {message.chat.id}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime("%d %B %Y –≥")}
üíé Premium —Å—Ç–∞—Ç—É—Å: {'–Ω–µ—Ç' if not subscription else subscription.end_at.strftime("–¥–æ %d %B %Y –≥")}
""", reply_markup=kb)


@router.callback_query(F.data == "cancel_auto_payment")
async def cancel_auto_payment(call: CallbackQuery):
    user = await database.get_user_by_telegram_id(message.chat.id)
    user.payment_method_id = None
    user.save()
    await call.message.delete()
    await call.message.answer("–ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")


@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    await message.answer("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è:\n–ß–∞—Ç-–±–æ—Ç –°–∞—à–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ ChatGPT.\n–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É –≤ —Å—É—Ç–∫–∏.\n–î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å.\n\n‚úÖ –ü–ª–∞—Ç–Ω–∞—è –ü–æ–¥–ø–∏—Å–∫–∞:\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É.\n–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–∞–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n‚úÖ –û–ø–ª–∞—Ç–∞:\n–û–ø–ª–∞—Ç–∞ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ–∞–º –∏ —É—Å–ª–æ–≤–∏—è–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã.\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n\n‚úÖ –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º.\n\n‚úÖ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:\n–ë–æ—Ç –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –±–æ—Ç–æ–º —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π.\n\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏ –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞ –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞: @Sasha_supp.")


@router.message()
async def dialog(message: Message, state: FSMContext, bot: Bot, openai: AsyncOpenAI):
    prompt_id = (await state.get_data())["prompt_id"]
    return await process_dialog(message, prompt_id, openai, bot)
